"use client";

import { useState, useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { liveSearchEvents, Event, EventSearchParams } from "@/lib/utils/event-filter";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { motion } from "@/lib/animation";
import { highlightText, highlightTags } from "@/lib/utils/highlight-text";
import { format } from "date-fns";
import Link from "next/link";
import { Search, Calendar, MapPin, X } from "lucide-react";

export default function SearchPage({
  searchParams,
}: {
  searchParams: { [key: string]: string | string[] | undefined };
}) {
  const router = useRouter();
  const query = (searchParams.q as string) || "";
  const type = (searchParams.type as string) || "";
  const location = (searchParams.location as string) || "";
  const date = (searchParams.date as string) || "";

  // State for filtered events
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [visibleEvents, setVisibleEvents] = useState<Event[]>([]);
  const [page, setPage] = useState(1);
  const eventsPerPage = 6;
  const [selectedType, setSelectedType] = useState(type || "All Types");
  const [selectedTopic, setSelectedTopic] = useState(location || "Topic");
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

  useEffect(() => {
    const fetchEvents = async () => {
      setIsLoading(true);
      setError(null);
      setPage(1); // Reset to first page when search params change
      
      try {
        // Prepare search parameters
        const searchParams: EventSearchParams = {};
        if (query) searchParams.keyword = query;
        if (type) searchParams.type = type;
        if (location) searchParams.topic = location;
        
        // Fetch events
        const filteredEvents = await liveSearchEvents({
          query,
          type: type || undefined,
          location: location || undefined,
          date: date || undefined,
          limit: 50 // Show more results on the full search page
        });
        setEvents(filteredEvents);
        // Initialize visible events with first page
        setVisibleEvents(filteredEvents.slice(0, eventsPerPage));
      } catch (err) {
        console.error("Error fetching events:", err);
        setError("Failed to load events. Please try again.");
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchEvents();
  }, [query, type, location, eventsPerPage]);

  // Handle loading more events
  const loadMoreEvents = () => {
    const nextPage = page + 1;
    const startIndex = page * eventsPerPage;
    const endIndex = nextPage * eventsPerPage;
    const nextEvents = events.slice(startIndex, endIndex);
    
    if (nextEvents.length > 0) {
      setVisibleEvents(prev => [...prev, ...nextEvents]);
      setPage(nextPage);
    }
  };

  // Format date to readable format
  const formatEventDate = (dateStr: string) => {
    try {
      return format(new Date(dateStr), "MMMM d, yyyy");
    } catch (e) {
      return dateStr;
    }
  };

  // Handle filter changes
  const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newType = e.target.value;
    setSelectedType(newType);
    
    // Build new URL with updated parameters
    const params = new URLSearchParams(searchParams.toString());
    if (newType === "All Types") {
      params.delete("type");
    } else {
      params.set("type", newType);
    }
    
    // Navigate to the new URL
    router.push(`/search?${params.toString()}`);
  };

  const handleTopicChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newTopic = e.target.value;
    setSelectedTopic(newTopic);
    
    // Build new URL with updated parameters
    const params = new URLSearchParams(searchParams.toString());
    if (newTopic === "Topic") {
      params.delete("location");
    } else {
      params.set("location", newTopic);
    }
    
    // Navigate to the new URL
    router.push(`/search?${params.toString()}`);
  };
  
  // Handle search button click
  const handleSearch = () => {
    const params = new URLSearchParams();
    
    // Only add parameters that have values
    if (query) params.set("q", query);
    if (selectedType !== "All Types") params.set("type", selectedType);
    if (selectedTopic !== "Topic") params.set("location", selectedTopic);
    
    // Navigate to search with only the filled parameters
    router.push(`/search?${params.toString()}`);
  };

  return (
    <main className="min-h-screen bg-gradient-to-b from-[#0f0f1c] via-[#16162c] to-[#1b1b2e] text-white relative overflow-hidden">
      {/* Grid pattern background */}
      <div className="absolute inset-0 bg-[url('/grid-pattern.svg')] bg-center [mask-image:linear-gradient(180deg,white,rgba(255,255,255,0))] opacity-10"></div>
      
      {/* Premium floating gradient blobs */}
      <div className="absolute top-[10%] left-[5%] w-[30%] h-[40%] bg-gradient-to-br from-[#9945FF]/20 to-[#2B6AFF]/10 rounded-full blur-[120px] -z-10 animate-float-slow"></div>
      <div className="absolute top-[60%] right-[5%] w-[25%] h-[30%] bg-gradient-to-br from-[#2B6AFF]/15 to-[#9945FF]/5 rounded-full blur-[100px] -z-10 animate-float-medium"></div>
      <div className="absolute bottom-[10%] left-[15%] w-[20%] h-[25%] bg-gradient-to-br from-[#FF6CAB]/10 to-[#7366FF]/5 rounded-full blur-[80px] -z-10 animate-float-fast"></div>
      
      {/* Mesh gradient overlay */}
      <div className="absolute inset-0 bg-[url('/mesh-gradient.svg')] bg-cover opacity-5 mix-blend-overlay"></div>
      
      {/* Noise texture */}
      <div className="absolute inset-0 bg-[url('/noise.png')] bg-repeat opacity-[0.03] mix-blend-overlay"></div>
      
      <div className="max-w-screen-xl mx-auto px-6 sm:px-4 py-10 relative z-10">
        <motion.div 
          className="mb-6"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Link href="/" className="text-purple-400 hover:text-purple-300 flex items-center gap-2 mb-3 transition-colors text-sm font-medium">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to Home
          </Link>
          
          <h1 className="text-3xl md:text-4xl font-bold mb-2 tracking-wide">
            {query ? (
              <>
                Search Results for <span className="bg-clip-text text-transparent bg-gradient-to-r from-[#9945FF] to-[#2B6AFF]">"{query}"</span>
              </>
            ) : (
              "Search Events"
            )}
            {(type && type !== "All Types") && (
              <span className="ml-2 text-base md:text-lg text-[#9945FF]/80">• {type}</span>
            )}
            {(location && location !== "Topic") && (
              <span className="ml-2 text-base md:text-lg text-[#2B6AFF]/80">• {location}</span>
            )}
          </h1>
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-[#9945FF] rounded-full animate-pulse"></div>
            <p className="text-sm text-zinc-400">
              {events.length} {events.length === 1 ? "event" : "events"} found
            </p>
          </div>
          
          {/* Advanced Filter Bar - Premium glassmorphic design */}
          <div className="bg-gradient-to-br from-white/[0.08] to-white/[0.02] backdrop-blur-xl rounded-2xl p-6 shadow-lg mt-6 sticky top-0 z-50 border border-white/10 overflow-hidden">
            {/* Active filters display */}
            {(query || type || location) && (
              <div className="w-full flex flex-wrap gap-2 mb-4">
                {query && (
                  <Badge className="bg-[#9945FF]/10 text-[#9945FF] border-[#9945FF]/20 px-3 py-1 flex items-center text-xs">
                    Search: {query}
                    <button 
                      onClick={() => {
                        const params = new URLSearchParams(searchParams.toString());
                        params.delete('q');
                        router.push(`/search?${params.toString()}`);
                      }}
                      className="ml-2 hover:text-white"
                      aria-label="Remove search filter"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                )}
                {type && type !== "All Types" && (
                  <Badge className="bg-[#2B6AFF]/10 text-[#2B6AFF] border-[#2B6AFF]/20 px-3 py-1 flex items-center text-xs">
                    Type: {type}
                    <button 
                      onClick={() => {
                        const params = new URLSearchParams(searchParams.toString());
                        params.delete('type');
                        router.push(`/search?${params.toString()}`);
                      }}
                      className="ml-2 hover:text-white"
                      aria-label="Remove type filter"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                )}
                {location && location !== "Topic" && (
                  <Badge className="bg-[#9945FF]/10 text-[#9945FF] border-[#9945FF]/20 px-3 py-1 flex items-center text-xs">
                    Topic: {location}
                    <button 
                      onClick={() => {
                        const params = new URLSearchParams(searchParams.toString());
                        params.delete('location');
                        router.push(`/search?${params.toString()}`);
                      }}
                      className="ml-2 hover:text-white"
                      aria-label="Remove location filter"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                )}
                <button 
                  onClick={() => router.push('/search')}
                  className="bg-white/5 text-zinc-400 border border-white/10 px-3 py-1 rounded-full text-xs flex items-center hover:bg-white/10 transition-colors"
                  aria-label="Clear all filters"
                >
                  Clear All
                </button>
              </div>
            )}
            <div className="flex flex-wrap gap-4 items-center">
              <div className="relative">
                <select
                  value={selectedType}
                  onChange={handleTypeChange}
                  className="h-10 bg-white/5 border-0 rounded-2xl px-4 py-2 text-sm text-white appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-[#9945FF]/30 hover:bg-white/10 transition-all"
                </select>
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none z-20">
                  <svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 1.5L6 6.5L11 1.5" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </div>
              </div>
              <div className="relative group">
                <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-blue-500/20 rounded-xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <select
                  value={selectedTopic}
                  onChange={handleTopicChange}
                  className="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-purple-500/50 appearance-none relative z-10 font-medium tracking-wide"
                >
                  <option value="">All Topics</option>
                  <option value="ai">Artificial Intelligence</option>
                  <option value="blockchain">Blockchain</option>
                  <option value="design">Design</option>
                  <option value="entrepreneurship">Entrepreneurship</option>
                  <option value="finance">Finance</option>
                  <option value="marketing">Marketing</option>
                  <option value="product">Product Management</option>
                  <option value="technology">Technology</option>
                </select>
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none z-20">
                  <svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 1.5L6 6.5L11 1.5" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </div>
              </div>
              <div className="relative group">
                <div className="absolute inset-0 bg-gradient-to-r from-purple-500/30 to-blue-500/30 rounded-xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <button
                  onClick={handleSearch}
                  className="w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-medium py-3 px-4 rounded-xl transition-all shadow-[0_0_15px_rgba(139,92,246,0.3)] hover:shadow-[0_0_20px_rgba(139,92,246,0.5)] relative z-10 tracking-wide"
                >
                  Find Events
                </button>
              </div>
            </div>
            
            {/* Advanced filter toggle button */}
            <button 
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              className="absolute -bottom-12 left-1/2 transform -translate-x-1/2 flex items-center gap-2 text-white/70 hover:text-white text-sm font-medium bg-white/5 px-4 py-2 rounded-full border border-white/10 transition-all hover:bg-white/10"
            >
              <img src="/filter-icon.svg" alt="Filter" className="w-4 h-4" />
              {showAdvancedFilters ? 'Hide Advanced Filters' : 'Show Advanced Filters'}
            </button>
            
            {/* Advanced filters panel */}
            {showAdvancedFilters && (
              <div className="mt-6 p-5 bg-white/5 border border-white/10 rounded-xl animate-fadeIn">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <label className="block text-white/70 text-sm font-medium mb-2">Date Range</label>
                    <div className="flex gap-2">
                      <input 
                        type="date" 
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-3 py-2 text-white placeholder-white/40 focus:outline-none focus:ring-1 focus:ring-purple-500/50"
                      />
                      <input 
                        type="date" 
                        className="w-full bg-white/5 border border-white/10 rounded-lg px-3 py-2 text-white placeholder-white/40 focus:outline-none focus:ring-1 focus:ring-purple-500/50"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-white/70 text-sm font-medium mb-2">Format</label>
                    <div className="flex flex-wrap gap-2">
                      {['In-person', 'Virtual', 'Hybrid'].map(format => (
                        <button 
                          key={format}
                          className="px-3 py-1.5 rounded-full text-sm bg-white/5 border border-white/10 hover:bg-white/10 transition-all"
                        >
                          {format}
                        </button>
                      ))}
                    </div>
                  </div>
                  <div>
                    <label className="block text-white/70 text-sm font-medium mb-2">Price</label>
                    <div className="flex flex-wrap gap-2">
                      {['Free', 'Paid', 'Premium'].map(price => (
                        <button 
                          key={price}
                          className="px-3 py-1.5 rounded-full text-sm bg-white/5 border border-white/10 hover:bg-white/10 transition-all"
                        >
                          {price}
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </motion.div>

        {isLoading ? (
          <div className="flex flex-col items-center justify-center py-16">
            <div className="flex space-x-3">
              <div className="w-3 h-3 bg-[#9945FF] rounded-full animate-bounce"></div>
              <div className="w-3 h-3 bg-[#7B4AFF] rounded-full animate-bounce delay-100"></div>
              <div className="w-3 h-3 bg-[#2B6AFF] rounded-full animate-bounce delay-200"></div>
            </div>
            <p className="mt-4 text-zinc-400 text-sm font-medium">Loading search results...</p>
          </div>
        ) : error ? (
          <div className="bg-gradient-to-br from-[#2D0A22]/50 to-[#1A0A1F]/50 rounded-2xl p-8 text-center shadow-lg ring-1 ring-red-500/20 backdrop-blur-md">
            <p className="text-red-400 text-lg font-medium">{error}</p>
            <Button 
              onClick={() => window.location.reload()} 
              className="mt-6 bg-gradient-to-r from-red-500 to-red-600 hover:opacity-90 rounded-full shadow-[0_0_20px_rgba(239,68,68,0.3)] hover:shadow-[0_0_20px_rgba(239,68,68,0.5)] transition-all"
            >
              Try Again
            </Button>
          </div>
        ) : events.length === 0 ? (
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="bg-gradient-to-br from-[#1A1A2E]/50 to-[#16213E]/50 rounded-2xl p-8 text-center shadow-lg ring-1 ring-white/10 backdrop-blur-md"
          >
            <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-white/5 flex items-center justify-center">
              <Search className="w-8 h-8 text-[#9945FF]/60" />
            </div>
            <h2 className="text-2xl font-semibold mb-2 text-white tracking-wide">No events found</h2>
            <p className="text-zinc-400 mb-6 max-w-md mx-auto text-sm">
              {query ? (
                <>No events match your search for <span className="text-[#9945FF]">"{query}"</span>.<br/>Try different keywords or filters.</>
              ) : (
                <>Please enter a search term to find events.</>
              )}
            </p>
            <Link href="/">
              <Button className="bg-gradient-to-r from-[#9945FF] to-[#2B6AFF] hover:opacity-90 rounded-full shadow-[0_0_20px_rgba(153,69,255,0.3)] hover:shadow-[0_0_20px_rgba(153,69,255,0.5)] transition-all px-6">
                Back to Home
              </Button>
            </Link>
          </motion.div>
        ) : (
          <>
          {/* Featured events section (larger cards at the top) */}
          {visibleEvents.filter(event => event.is_featured).length > 0 && (
            <div className="mb-10">
              <h2 className="text-2xl font-bold mb-6 tracking-tight">
                <span className="bg-clip-text text-transparent bg-gradient-to-r from-[#9945FF] to-[#2B6AFF]">Featured</span> Events
              </h2>
              <div className="grid grid-cols-1 gap-8">
                {visibleEvents.filter(event => event.is_featured).slice(0, 2).map((event, index) => (
                  <motion.div
                    key={event.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    whileHover={{ y: -5 }}
                    className="group relative overflow-hidden"
                  >
                    {/* Premium glassmorphic card with gradient border */}
                    <div className="absolute inset-0 bg-gradient-to-r from-[#9945FF]/20 to-[#2B6AFF]/20 rounded-3xl blur-md opacity-50 group-hover:opacity-70 transition-opacity"></div>
                    <div className="relative bg-gradient-to-br from-white/[0.08] to-white/[0.02] backdrop-blur-xl rounded-3xl overflow-hidden border border-white/10 shadow-[0_8px_30px_rgb(0,0,0,0.12)] group-hover:shadow-[0_8px_30px_rgba(153,69,255,0.2)] transition-all duration-500">
                      
                      {/* Featured badge with icon */}
                      <div className="absolute top-6 right-6 flex items-center gap-1.5 bg-gradient-to-r from-[#9945FF] to-[#2B6AFF] px-3 py-1.5 rounded-full text-white text-xs font-medium shadow-lg shadow-purple-500/30 z-20">
                        <svg className="w-3 h-3" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z" fill="currentColor"/>
                        </svg>
                        <span>Featured</span>
                      </div>
                      
                      {/* Make the entire card clickable */}
                      <Link href={`/event/${event.id}`} className="absolute inset-0 z-10" aria-label={`View details for ${event.title}`}>
                        <span className="sr-only">View details for {event.title}</span>
                      </Link>

                      <div className="p-8 flex flex-col md:flex-row gap-8">
                        {/* Left content */}
                        <div className="flex-1 min-w-0">
                          <h3 className="text-2xl font-bold tracking-tight mb-3 text-white">
                            {highlightText(event.title, query)}
                          </h3>
                          
                          <p className="text-zinc-300 mb-6 line-clamp-3">
                            {highlightText(event.description, query)}
                          </p>
                          
                          <div className="flex flex-wrap gap-2 mb-6">
                            {event.tags && event.tags.map((tag, index) => (
                              <span key={index} className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white/10 text-white backdrop-blur-md border border-white/10 hover:bg-white/20 transition-colors">
                                {highlightText(tag, query)}
                              </span>
                            ))}
                          </div>
                          
                          <div className="flex flex-wrap gap-6 text-sm text-zinc-400">
                            <div className="flex items-center">
                              <Calendar className="w-4 h-4 mr-2 text-[#9945FF]" />
                              <span className="font-medium">{formatEventDate(event.date)}</span>
                            </div>
                            <div className="flex items-center">
                              <MapPin className="w-4 h-4 mr-2 text-[#9945FF]" />
                              <span className="font-medium">{highlightText(event.location, query)}</span>
                            </div>
                            <div className="flex items-center">
                              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-[#9945FF]/10 text-[#9945FF] border border-[#9945FF]/20">
                                {highlightText(event.type, query)}
                              </span>
                            </div>
                          </div>
                        </div>
                        
                        {/* Right content - CTA */}
                        <div className="flex flex-col justify-end items-end">
                          <div className="p-4 bg-white/5 backdrop-blur-md rounded-2xl border border-white/10 hover:bg-white/10 transition-colors group-hover:border-white/20 w-full md:w-auto">
                            <div className="text-xs text-zinc-400 mb-2">Registration closing soon</div>
                            <div className="text-lg font-bold text-white mb-1">42 spots left</div>
                            <div className="text-xs text-zinc-400 mb-4">Out of 100 total</div>
                            <div className="relative h-1.5 bg-white/10 rounded-full overflow-hidden mb-6">
                              <div className="absolute top-0 left-0 h-full bg-gradient-to-r from-[#9945FF] to-[#2B6AFF] rounded-full" style={{ width: '58%' }}></div>
                            </div>
                            <Button className="w-full bg-gradient-to-r from-[#9945FF] to-[#2B6AFF] hover:opacity-90 text-white font-medium rounded-xl border-0 shadow-[0_0_20px_rgba(153,69,255,0.3)] hover:shadow-[0_0_20px_rgba(153,69,255,0.5)] transition-all">
                              View Details
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          )}
          
          {/* Regular event cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {visibleEvents
              .filter(event => !event.is_featured || visibleEvents.filter(e => e.is_featured).indexOf(event) >= 2)
              .map((event, index) => (
              <motion.div
                key={event.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.4, delay: index * 0.05 }}
                whileHover={{ y: -5 }}
                className="group relative overflow-hidden"
              >
                {/* Premium glassmorphic card */}
                <div className="absolute inset-0 bg-gradient-to-r from-[#9945FF]/10 to-[#2B6AFF]/10 rounded-2xl blur-md opacity-30 group-hover:opacity-50 transition-opacity"></div>
                <div className="relative bg-gradient-to-br from-white/[0.07] to-white/[0.01] backdrop-blur-lg rounded-2xl overflow-hidden border border-white/10 shadow-[0_4px_20px_rgb(0,0,0,0.08)] group-hover:shadow-[0_4px_20px_rgba(153,69,255,0.15)] transition-all duration-500">
                  
                  {/* Make the entire card clickable */}
                  <Link href={`/event/${event.id}`} className="absolute inset-0 z-10" aria-label={`View details for ${event.title}`}>
                    <span className="sr-only">View details for {event.title}</span>
                  </Link>

                  <div className="p-6 flex flex-col space-y-4">
                    <div className="flex justify-between items-start">
                      <h3 className="text-xl font-bold tracking-tight text-white">{highlightText(event.title, query)}</h3>
                      {event.is_featured && (
                        <div className="flex items-center gap-1 bg-gradient-to-r from-[#9945FF] to-[#2B6AFF] px-2 py-1 rounded-full text-white text-xs font-medium shadow-lg shadow-purple-500/20">
                          <svg className="w-3 h-3" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z" fill="currentColor"/>
                          </svg>
                          <span>Featured</span>
                        </div>
                      )}
                    </div>

                    <p className="text-sm text-zinc-300 line-clamp-2">{highlightText(event.description, query)}</p>

                    <div className="flex flex-wrap gap-2">
                      {event.tags && event.tags.map((tag, index) => (
                        <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-white/10 text-white backdrop-blur-sm border border-white/10 hover:bg-white/15 transition-colors">
                          {highlightText(tag, query)}
                        </span>
                      ))}
                    </div>

                    <div className="flex flex-wrap gap-4 text-xs text-zinc-400 mt-2">
                      <div className="flex items-center">
                        <Calendar className="w-3.5 h-3.5 mr-1.5 text-[#9945FF]" />
                        <span className="font-medium">{formatEventDate(event.date)}</span>
                      </div>
                      <div className="flex items-center">
                        <MapPin className="w-3.5 h-3.5 mr-1.5 text-[#9945FF]" />
                        <span className="font-medium">{highlightText(event.location, query)}</span>
                      </div>
                      <div className="flex items-center">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-[#9945FF]/10 text-[#9945FF] border border-[#9945FF]/20">
                          {highlightText(event.type, query)}
                        </span>
                      </div>
                    </div>
                    
                    {/* Attendance indicator */}
                    <div className="flex items-center justify-between pt-2 mt-2 border-t border-white/5">
                      <div className="flex -space-x-2">
                        {[...Array(3)].map((_, i) => (
                          <div key={i} className="w-6 h-6 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center text-[10px] font-bold text-white ring-2 ring-[#16213E]">
                            {String.fromCharCode(65 + i)}
                          </div>
                        ))}
                        <div className="w-6 h-6 rounded-full bg-white/10 flex items-center justify-center text-[10px] font-medium text-white ring-2 ring-[#16213E]">
                          +{Math.floor(Math.random() * 20) + 5}
                        </div>
                      </div>
                      <div className="text-xs text-zinc-400">
                        <span className="text-white font-medium">{Math.floor(Math.random() * 50) + 10}</span> spots left
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
            
            {/* Load More button */}
            {visibleEvents.length < events.length && (
              <div className="col-span-1 md:col-span-2 flex justify-center mt-8">
                <Button 
                  onClick={loadMoreEvents}
                  className="bg-gradient-to-r from-purple-500/30 to-blue-500/30 hover:from-purple-500/50 hover:to-blue-500/50 text-white border border-purple-500/30 shadow-[0_0_10px_rgba(139,92,246,0.2)] hover:shadow-[0_0_15px_rgba(139,92,246,0.4)] transition-all"
                >
                  Load More Events
                </Button>
              </div>
            )}
          </div>
          </>
        )
      </div>
    </main>
  );
}
